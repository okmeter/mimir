// SPDX-License-Identifier: AGPL-3.0-only
// Provenance-includes-location: https://github.com/cortexproject/cortex/blob/master/pkg/util/log/log.go
// Provenance-includes-license: Apache-2.0
// Provenance-includes-copyright: The Cortex Authors.

package log

import (
	"crypto/md5"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"os"
	"strconv"

	"github.com/go-kit/log"
	"github.com/go-kit/log/level"
	"github.com/gogo/protobuf/proto"
	"github.com/weaveworks/common/logging"
	"github.com/weaveworks/common/server"
)

var (
	// Logger is a shared go-kit logger.
	// TODO: Change all components to take a non-global logger via their constructors.
	// Prefer accepting a non-global logger as an argument.
	Logger = log.NewNopLogger()
)

// InitLogger initialises the global gokit logger (util_log.Logger) and overrides the
// default logger for the server.
func InitLogger(cfg *server.Config) {
	l := NewDefaultLogger(cfg.LogLevel, cfg.LogFormat)
	// when using util_log.Logger, skip 3 stack frames.
	Logger = log.With(l, "caller", log.Caller(3))

	// cfg.Log wraps log function, skip 4 stack frames to get caller information.
	// this works in go 1.12, but doesn't work in versions earlier.
	// it will always shows the wrapper function generated by compiler
	// marked <autogenerated> in old versions.
	cfg.Log = logging.GoKit(log.With(l, "caller", log.Caller(4)))
}

// NewDefaultLogger creates a new gokit logger with the configured level and format
func NewDefaultLogger(l logging.Level, format logging.Format) log.Logger {
	var logger log.Logger
	if format.String() == "json" {
		logger = log.NewJSONLogger(log.NewSyncWriter(os.Stderr))
	} else {
		logger = log.NewLogfmtLogger(log.NewSyncWriter(os.Stderr))
	}

	// return a Logger without caller information, shouldn't use directly
	return log.With(level.NewFilter(logger, l.Gokit), "ts", log.DefaultTimestampUTC)
}

// CheckFatal prints an error and exits with error code 1 if err is non-nil
func CheckFatal(location string, err error) {
	if err != nil {
		logger := level.Error(Logger)
		if location != "" {
			logger = log.With(logger, "msg", "error "+location)
		}
		// %+v gets the stack trace from errors using github.com/pkg/errors
		logger.Log("err", fmt.Sprintf("%+v", err))
		os.Exit(1)
	}
}

type KeyValue interface {
	Key() string
	Value() string
}

type fnStringer func() string

func (fn fnStringer) String() string {
	return fn()
}

func Debug(logger log.Logger, kvs ...KeyValue) func(msg string, kvs ...KeyValue) {
	logger = level.Debug(logger)
	return func(msg string, localKVs ...KeyValue) {
		args := make([]interface{}, 0, 2+2*len(kvs)+2*len(localKVs))
		args = append(args, "debug_msg", msg)
		for _, kv := range kvs {
			args = append(args, fnStringer(kv.Key), fnStringer(kv.Value))
		}
		for _, kv := range localKVs {
			args = append(args, fnStringer(kv.Key), fnStringer(kv.Value))
		}
		_ = logger.Log(args...)
	}
}

type protoMD5 struct {
	key string
	msg proto.Marshaler
}

func ProtoMD5(key string, msg proto.Marshaler) KeyValue {
	return protoMD5{key, msg}
}

func (p protoMD5) Key() string {
	return p.key
}

func (p protoMD5) Value() string {
	b, _ := p.msg.Marshal()
	h := md5.Sum(b)
	return base64.URLEncoding.EncodeToString(h[:])
}

type jsoner struct {
	key string
	msg interface{}
}

func JSON(key string, msg interface{}) KeyValue {
	return jsoner{key, msg}
}

func (p jsoner) Key() string {
	return p.key
}

func (p jsoner) Value() string {
	b, _ := json.Marshal(p.msg)
	return string(b)
}

type integer struct {
	key string
	val int
}

func Int(key string, v int) KeyValue {
	return integer{key, v}
}

func (i integer) Key() string {
	return i.key
}

func (i integer) Value() string {
	return strconv.Itoa(i.val)
}

type stringer struct {
	key string
	val fmt.Stringer
}

func Stringer(key string, val fmt.Stringer) KeyValue {
	return stringer{key, val}
}

func (s stringer) Key() string {
	return s.key
}

func (s stringer) Value() string {
	return s.val.String()
}

type closure struct {
	key string
	val func() string
}

func Closure(key string, val func() string) KeyValue {
	return closure{key, val}
}

func (s closure) Key() string {
	return s.key
}

func (s closure) Value() string {
	return s.val()
}
