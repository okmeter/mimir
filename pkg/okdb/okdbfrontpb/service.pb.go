// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package okdbfrontpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xca, 0xcf, 0x2e, 0x2e, 0xc9,
	0x2f, 0x4a, 0x4c, 0x4f, 0x8d, 0x07, 0x0b, 0x24, 0xe7, 0xe7, 0x48, 0xf1, 0xe5, 0xa6, 0x16, 0x17,
	0x27, 0xa6, 0xa7, 0x16, 0x43, 0xd4, 0x18, 0x6d, 0x60, 0xe2, 0x12, 0xf4, 0xcf, 0x0e, 0x86, 0x28,
	0x73, 0x2b, 0xca, 0xcf, 0x2b, 0x49, 0xcd, 0x4b, 0x11, 0x0a, 0xe1, 0xe2, 0x74, 0x4f, 0x2d, 0x09,
	0x4e, 0x2d, 0xca, 0x4c, 0x2d, 0x16, 0x52, 0xd4, 0xc3, 0x34, 0x47, 0x0f, 0x22, 0x17, 0x94, 0x5a,
	0x58, 0x9a, 0x5a, 0x5c, 0x22, 0xa5, 0x84, 0x4f, 0x49, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x12,
	0x83, 0x50, 0x02, 0x17, 0xaf, 0x7b, 0x6a, 0x89, 0x4f, 0x62, 0x52, 0x6a, 0x8e, 0x5f, 0x62, 0x6e,
	0x6a, 0xb1, 0x90, 0x2a, 0x36, 0x6d, 0x08, 0x79, 0x98, 0xe9, 0x6a, 0x84, 0x94, 0xc1, 0x6d, 0x48,
	0xe6, 0xe2, 0x83, 0xd9, 0x10, 0x96, 0x98, 0x53, 0x9a, 0x5a, 0x2c, 0x84, 0x5b, 0x2f, 0x44, 0x01,
	0xcc, 0x0e, 0x75, 0x82, 0xea, 0x60, 0x96, 0x38, 0xc9, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91,
	0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x51, 0xdc, 0xf9, 0xd9, 0x29, 0x49, 0x69, 0xa0, 0x80, 0x2b,
	0x48, 0x5a, 0xc4, 0xc4, 0xec, 0xe1, 0x13, 0x9e, 0xc4, 0x06, 0x36, 0xc0, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x65, 0xdc, 0x68, 0xd4, 0x8f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OkStorageFrontendClient is the client API for OkStorageFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OkStorageFrontendClient interface {
	GetSeries(ctx context.Context, in *SeriesRequest, opts ...grpc.CallOption) (*SeriesResponse, error)
	GetLabelNames(ctx context.Context, in *LabelNamesRequest, opts ...grpc.CallOption) (*LabelNamesResponse, error)
	GetLabelValues(ctx context.Context, in *LabelValuesRequest, opts ...grpc.CallOption) (*LabelValuesResponse, error)
}

type okStorageFrontendClient struct {
	cc *grpc.ClientConn
}

func NewOkStorageFrontendClient(cc *grpc.ClientConn) OkStorageFrontendClient {
	return &okStorageFrontendClient{cc}
}

func (c *okStorageFrontendClient) GetSeries(ctx context.Context, in *SeriesRequest, opts ...grpc.CallOption) (*SeriesResponse, error) {
	out := new(SeriesResponse)
	err := c.cc.Invoke(ctx, "/okstorage_protocol.OkStorageFrontend/GetSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okStorageFrontendClient) GetLabelNames(ctx context.Context, in *LabelNamesRequest, opts ...grpc.CallOption) (*LabelNamesResponse, error) {
	out := new(LabelNamesResponse)
	err := c.cc.Invoke(ctx, "/okstorage_protocol.OkStorageFrontend/GetLabelNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *okStorageFrontendClient) GetLabelValues(ctx context.Context, in *LabelValuesRequest, opts ...grpc.CallOption) (*LabelValuesResponse, error) {
	out := new(LabelValuesResponse)
	err := c.cc.Invoke(ctx, "/okstorage_protocol.OkStorageFrontend/GetLabelValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OkStorageFrontendServer is the server API for OkStorageFrontend service.
type OkStorageFrontendServer interface {
	GetSeries(context.Context, *SeriesRequest) (*SeriesResponse, error)
	GetLabelNames(context.Context, *LabelNamesRequest) (*LabelNamesResponse, error)
	GetLabelValues(context.Context, *LabelValuesRequest) (*LabelValuesResponse, error)
}

// UnimplementedOkStorageFrontendServer can be embedded to have forward compatible implementations.
type UnimplementedOkStorageFrontendServer struct {
}

func (*UnimplementedOkStorageFrontendServer) GetSeries(ctx context.Context, req *SeriesRequest) (*SeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeries not implemented")
}
func (*UnimplementedOkStorageFrontendServer) GetLabelNames(ctx context.Context, req *LabelNamesRequest) (*LabelNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelNames not implemented")
}
func (*UnimplementedOkStorageFrontendServer) GetLabelValues(ctx context.Context, req *LabelValuesRequest) (*LabelValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabelValues not implemented")
}

func RegisterOkStorageFrontendServer(s *grpc.Server, srv OkStorageFrontendServer) {
	s.RegisterService(&_OkStorageFrontend_serviceDesc, srv)
}

func _OkStorageFrontend_GetSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkStorageFrontendServer).GetSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/okstorage_protocol.OkStorageFrontend/GetSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkStorageFrontendServer).GetSeries(ctx, req.(*SeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OkStorageFrontend_GetLabelNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkStorageFrontendServer).GetLabelNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/okstorage_protocol.OkStorageFrontend/GetLabelNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkStorageFrontendServer).GetLabelNames(ctx, req.(*LabelNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OkStorageFrontend_GetLabelValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkStorageFrontendServer).GetLabelValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/okstorage_protocol.OkStorageFrontend/GetLabelValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkStorageFrontendServer).GetLabelValues(ctx, req.(*LabelValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OkStorageFrontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "okstorage_protocol.OkStorageFrontend",
	HandlerType: (*OkStorageFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSeries",
			Handler:    _OkStorageFrontend_GetSeries_Handler,
		},
		{
			MethodName: "GetLabelNames",
			Handler:    _OkStorageFrontend_GetLabelNames_Handler,
		},
		{
			MethodName: "GetLabelValues",
			Handler:    _OkStorageFrontend_GetLabelValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
